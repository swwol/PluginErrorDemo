// A modified version of the flat-swift5 stencil that allows you to extend a previously generated enum to add new values

 // swiftlint:disable all
 // Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

 {% if tables.count > 0 %}
 {% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
 import Foundation

 {% if param.extends %}
 import enum {{param.extends}}
 {% endif %}

 // swiftlint:disable superfluous_disable_command file_length implicit_return prefer_self_in_static_references

 // MARK: - Strings

 {% macro parametersBlock types %}
   {%- for type in types -%}
     {%- if type == "String" -%}
     _ p{{forloop.counter}}: Any
     {%- else -%}
     _ p{{forloop.counter}}: {{type}}
     {%- endif -%}
     {{ ", " if not forloop.last }}
   {%- endfor -%}
 {% endmacro %}
 {% macro argumentsBlock types %}
   {%- for type in types -%}
     {%- if type == "String" -%}
     String(describing: p{{forloop.counter}})
     {%- elif type == "UnsafeRawPointer" -%}
     Int(bitPattern: p{{forloop.counter}})
     {%- else -%}
     p{{forloop.counter}}
     {%- endif -%}
     {{ ", " if not forloop.last }}
   {%- endfor -%}
 {% endmacro %}
 {% macro recursiveBlock table item isExtension %}
   {% for string in item.strings %}
   {% if not param.noComments %}
   {% for line in string.comment|default:string.translation|split:"\n" %}
   /// {{line}}
   {% endfor %}
   {% endif %}
   {% set translation string.translation|replace:'"','\"'|replace:'  ','\t' %}
   {% if string.types %}
   {% if !isExtension %}{{accessModifier}} {% endif %}static func {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
     return {{enumName}}.tr("{{table}}", "{{string.key}}", {%+ call argumentsBlock string.types %}, fallback: "{{translation}}")
   }
   {% elif param.lookupFunction %}
   {% if !isExtension %}{{accessModifier}} {% endif %}static var {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: String { return {{enumName}}.tr("{{table}}", "{{string.key}}", fallback: "{{translation}}") }
   {% else %}
   {% if !isExtension %}{{accessModifier}} {% endif %}static let {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{enumName}}.tr("{{table}}", "{{string.key}}", fallback: "{{translation}}")
   {% endif %}
   {% endfor %}
   {% for child in item.children %}
   {% call recursiveBlock table child isExtension %}
   {% endfor %}
 {% endmacro %}
 // swiftlint:disable function_parameter_count identifier_name line_length type_body_length
 {% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
 {{accessModifier}}{% if param.extends %} extension {{param.extends}}{% else %} enum {{enumName}}{% endif %} {
   {% if tables.count > 1 or param.forceFileNameEnum %}
   {% for table in tables %}
   {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
     {% filter indent:2," ",true %}{% call recursiveBlock table.name table.levels false %}{% endfilter %}
   }
   {% endfor %}
   {% else %}
   {% call recursiveBlock tables.first.name tables.first.levels param.extends %}
   {% endif %}
 }
 // swiftlint:enable function_parameter_count identifier_name line_length type_body_length

 // MARK: - Implementation Details

 extension {{enumName}} {
   private static func tr(_ table: String, _ key: String, _ args: CVarArg..., fallback value: String) -> String {
     {% if param.lookupFunction %}
     let format = {{ param.lookupFunction }}(key, table, value)
     {% else %}
     let format = {{param.bundle|default:"BundleToken.bundle"}}.localizedString(forKey: key, value: value, table: table)
     {% endif %}
     return String(format: format, locale: Locale.current, arguments: args)
   }
 }
 {% if not param.bundle and not param.lookupFunction %}

 // swiftlint:disable convenience_type
 private final class BundleToken {
   static let bundle: Bundle = {
     #if SWIFT_PACKAGE
     return Bundle.module
     #else
     return Bundle(for: BundleToken.self)
     #endif
   }()
 }
 // swiftlint:enable convenience_type
 {% endif %}
 {% else %}
 // No string found
 {% endif %}
